package ${package.Controller};

#if(${cfg.route.prefix} != "")
    #set($routePrefix = ${cfg.route.prefix})
#else
    #set($routePrefix = "")
#end

#if(${cfg.route.version} != "")
    #set($routeVersion = ${cfg.route.version})
#else
    #set($routeVersion = "")
#end

#if(${cfg.route.name} != "")
    #set($routePathName = ${cfg.route.name})
#else
    #set($routePathName = ${table.entityPath})
#end

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import com.nekoimi.nk.framework.mybatis.page.PageReq;
import org.springframework.http.server.reactive.ServerHttpRequest;
import com.nekoimi.nk.framework.mybatis.page.PageResult;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.Api;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;
import springfox.documentation.annotations.ApiIgnore;

import java.util.Map;

/**
 * ${entity} Controller
 * <p>
 * ${author}  ${date}
 * <p>
 * This code is generated using nk-devtools.
 */
@RestController
#if(${cfg.route.module} != "")
@Api(tags = "${routeVersion}${cfg.route.module}", produces = "application/json", consumes = "application/json")
#else
@Api(tags = "${routeVersion}${cfg.originalControllerName}", produces = "application/json", consumes = "application/json")
#end
public class ${cfg.originalControllerName} {
    private final ${table.serviceName} service;

    public ${cfg.originalControllerName}(${table.serviceName} service) {
        this.service = service;
    }

    /**
     * 获取${cfg.route.info}分页列表
     *
     * @return
     */
    @GetMapping("${routePrefix}/${routeVersion}/${routePathName}/list")
    @ApiOperation(value = "获取${cfg.route.info}分页列表", response = PageResult.class)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "p", value = "分页页码", required = false, defaultValue = "1", paramType = "query", dataType = "Integer"),
            @ApiImplicitParam(name = "ps", value = "每页显示条数", required = false, defaultValue = "10", paramType = "query", dataType = "Integer"),
            @ApiImplicitParam(name = "st", value = "排序字段", required = false, defaultValue = "", paramType = "query", dataType = "String",
                    allowableValues = "#foreach($field in ${table.fields})#if(${field.keyFlag})${field.name},#end#end#foreach($field in ${table.commonFields})${field.name},#end#foreach($field in ${table.fields})#if(!${field.keyFlag})#if($foreach.last)${field.name}#else${field.name},#end#end#end"),
            @ApiImplicitParam(name = "od", value = "排序规则", required = false, defaultValue = "", paramType = "query", dataType = "String",
                    allowableValues = "asc,desc")
    })
    public Mono<PageResult<${entity}>> list(@ApiIgnore ServerHttpRequest request) {
        return service.page(PageReq.buildFromRequest(request));
    }

    /**
     * 根据id获取${cfg.route.info}数据
     *
     * @param id
     * @return
     */
    @GetMapping("${routePrefix}/${routeVersion}/${routePathName}/{id}")
    @ApiOperation(value = "根据id获取${cfg.route.info}数据", response = ${entity}.class)
    public Mono<${entity}> get(@PathVariable("id") String id) {
        return service.getByIdOrFail(id);
    }

    /**
     * 添加${cfg.route.info}数据
     *
     * @return
     */
    @PostMapping("${routePrefix}/${routeVersion}/${routePathName}")
    @ApiOperation(value = "添加${cfg.route.info}数据", response = ${entity}.class)
    public Mono<${entity}> save(@Validated @RequestBody ${entity} body) {
        return service.save(body).flatMap(service::getByIdOrFail);
    }

    /**
     * 根据id更新${cfg.route.info}所有字段
     *
     * @param body
     * @return
     */
    @PutMapping("${routePrefix}/${routeVersion}/${routePathName}/{id}/full")
    @ApiOperation(value = "根据id更新${cfg.route.info}所有字段", response = Boolean.class)
    public Mono<Boolean> updateFull(@PathVariable("id") String id, @Validated @RequestBody ${entity} body) {
        return service.updateById(id, body);
    }

    /**
     * 根据id更新${cfg.route.info}部分字段
     *
     * @param body
     * @return
     */
    @PutMapping("${routePrefix}/${routeVersion}/${routePathName}/{id}")
    @ApiOperation(value = "根据id更新${cfg.route.info}部分字段", response = Boolean.class)
    @ApiImplicitParams({
        #foreach($field in ${table.fields})
            #if(!${field.keyFlag})
                #if($foreach.hasNext)
                        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = false, paramType = "body", dataType = "${field.propertyType}"),
                #else
                        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = false, paramType = "body", dataType = "${field.propertyType}")
                #end
            #end
        #end
    })
    public Mono<Boolean> updateFull(@PathVariable("id") String id, @ApiIgnore @RequestBody Map<String, Object> body) {
        return service.updateById(id, body);
    }

    /**
     * 批量更新${cfg.route.info}数据
     *
     * @param body
     * @return
     */
    @PutMapping("${routePrefix}/${routeVersion}/${routePathName}/batch")
    @ApiOperation(value = "批量更新${cfg.route.info}数据")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "ids", value = "id的列表，使用,分割", required = true, example = "1,2,3", paramType = "query", dataType = "String"),
        #foreach($field in ${table.fields})
            #if(!${field.keyFlag})
                #if($foreach.hasNext)
                        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = false, paramType = "body", dataType = "${field.propertyType}"),
                #else
                        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = false, paramType = "body", dataType = "${field.propertyType}")
                #end
            #end
        #end
    })
    public Mono<Void> updateBatch(@RequestParam("ids") String ids, @ApiIgnore @RequestBody Map<String, Object> body) {
        return service.updateBatch(ids, body);
    }

    /**
     * 根据id删除${cfg.route.info}数据
     *
     * @param id
     * @return
     */
    @DeleteMapping("${routePrefix}/${routeVersion}/${routePathName}/{id}")
    @ApiOperation(value = "根据id删除${cfg.route.info}数据")
    public Mono<Void> remove(@PathVariable("id") String id) {
        return service.removeById(id);
    }

    /**
     * 批量删除${cfg.route.info}数据
     *
     * @return
     */
    @DeleteMapping("${routePrefix}/${routeVersion}/${routePathName}/batch")
    @ApiOperation(value = "批量删除${cfg.route.info}数据")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "ids", value = "id的列表，使用,分割", required = true, example = "1,2,3", paramType = "query", dataType = "String")
    })
    public Mono<Void> removeBatch(@RequestParam(value = "ids") String ids) {
        return service.removeBatch(ids);
    }

}
